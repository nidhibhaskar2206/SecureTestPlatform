generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
enum UserRole {
  ADMIN
  USER
}
 
enum SessionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  TERMINATED
}
 
enum WarningType {
  TAB_SWITCH
  COPY_PASTE
  SCREEN_SHARE
  SCREEN_RECORD
  SCREENSHOT
  RIGHT_CLICK
  INSPECT_ELEMENT
  WINDOW_CHANGE
}
 
model User {
  id            Int       @id @default(autoincrement())
  firstName     String    @db.VarChar(50)
  lastName      String    @db.VarChar(50)
  email         String    @unique @db.VarChar(255)
  password      String    
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  activeSession Boolean   @default(false)
  sessions      Session[]
  userTests     UserTest[]
  createdTests  Test[]    @relation("TestCreator")
 
  @@index([email])
}
 
model Session {
  id             Int           @id @default(autoincrement())
  userId         Int
  testId         Int
  status         SessionStatus @default(PENDING)
  startTime      DateTime
  endTime        DateTime
  rejoinAllowed  Boolean       @default(false)
  score          Int?         // Added to store test results
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  test           Test          @relation(fields: [testId], references: [id], onDelete: Cascade)
  warnings       Warning[]
 
  @@index([userId, testId])
  @@index([status])
}
 
model Warning {
  id          Int         @id @default(autoincrement())
  sessionId   Int
  warningType WarningType
  timestamp   DateTime    @default(now())
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
 
  @@index([sessionId])
  @@index([warningType])
}
 
model Test {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String    @db.Text
  duration    Int       // in minutes
  totalMarks  Int
  createdBy   Int
  createdAt   DateTime  @default(now())
  isActive    Boolean   @default(true)
  creator     User      @relation("TestCreator", fields: [createdBy], references: [id])
  sessions    Session[]
  questions   TestQuestionRelation[]
  userTests   UserTest[]
 
  @@index([createdBy])
  @@index([isActive])
}
 
model Question {
  id            Int       @id @default(autoincrement())
  questionText  String    @db.Text
  marks         Int
  correctOption Int
  options       QuestionOption[]
  tests         TestQuestionRelation[]
}
 
model Option {
  id              Int       @id @default(autoincrement())
  optionText      String    @db.Text
  questionOptions QuestionOption[]
}
 
model QuestionOption {
  optionId   Int
  questionId Int
  option     Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
 
  @@id([optionId, questionId])
  @@index([questionId])
}
 
model TestQuestionRelation {
  testId     Int
  questionId Int
  test       Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
 
  @@id([testId, questionId])
  @@index([testId])
}
 
model UserTest {
  testId     Int
  userId     Int
  assignedAt DateTime @default(now())
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([testId, userId])
  @@index([userId])
}
 